addpath('srcs', 'hw2_resources', 'hw2_resources/data')
%%% 3.1 %%%%
name = 'titanic';
data = importdata(strcat('data/data_',name,'_train.csv'));

X = data(:,1:11); 
[n, p] = size(X)
X_scaled = zeros(n,p);
Y = data(:,12);

for j = 1:11
    max_tmp = max(X(:,j));
    min_tmp = min(X(:,j));
    if max_tmp == min_tmp 
        denom = 1
    else
        denom = max_tmp - min_tmp
    end
    
    X_scaled(:, j) = (X(:,j) - min_tmp)/denom;
end

lr_run(X_scaled, Y, 0, true)

%%% 2.3 %%%%
% with regularized lambda
LAMBDA_RANGE = (-5:1:15);
valid_score_matrix = zeros(length(LAMBDA_RANGE), 4);

for i = 1:length(LAMBDA_RANGE)
    lambda_i = 10^(LAMBDA_RANGE(i));
    [w_reg1_1 valid_score_matrix(i, 1)]= lr_test('stdev1', lambda_i, false);
    [w_reg2_1 valid_score_matrix(i, 2)]= lr_test('stdev2', lambda_i, false);
    [w_reg3_1 valid_score_matrix(i, 3)]= lr_test('stdev4', lambda_i, false);
    [w_reg4_1 valid_score_matrix(i, 4)]= lr_test('nonsep', lambda_i, false);
end
valid_score_matrix

%%
optim_ver = ver('optim');
optim_ver = str2double(optim_ver.Version);
if optim_ver >= 6
    opts = optimset('Algorithm', 'interior-point-convex');
else
    opts = optimset('Algorithm', 'interior-point', 'LargeScale', 'off', 'MaxIter', 2000);
end
%%

function svm_test(name, C, kernel, sigma2)
disp('======Training======');
% load data from csv files
data = importdata(strcat('data/data_',name,'_train.csv'));
X = data(:,1:2);
Y = data(:,3);

% Carry out training, primal and/or dual
[w, w_0] = svm(X, Y, C, kernel, sigma2)

% Define the predictSVM(x) function, which uses trained parameters
predictSVM = @(x) w * x + w_0;

hold on;
% plot training results
plotDecisionBoundary(X, Y, predictSVM, [-1, 0, 1], 'SVM Train' ...
        strcat('SVM Training, C = ', num2str(C)), ...
        strcat('hw2_writeup/hw2_1_',name,'_a_',num2str(lambda),'.pdf')););


disp('======Validation======');
% load data from csv files
validate = importdata(strcat('data/data_',name,'_validate.csv'));
X = validate(:,1:2);
Y = validate(:,3);

% plot validation results
plotDecisionBoundary(X, Y, predictSVM, [-1, 0, 1], 'SVM Validate');

